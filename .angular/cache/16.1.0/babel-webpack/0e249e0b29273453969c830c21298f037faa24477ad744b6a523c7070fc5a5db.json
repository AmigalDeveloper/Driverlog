{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"../shared-service/dbservice.service\";\nconst httpOptions = {\n  responseType: 'json',\n  observe: 'response',\n  headers: new HttpHeaders({\n    \"Content-type\": 'application/json',\n    'Accept': '*/*',\n    'Access-Control-Allow-Origin': '*',\n    'Referrer-Policy': 'origin-when-cross-origin'\n  })\n};\nconst DATABASE_NAME = 'UserBase';\nconst DATABASE_VERSION = 1;\nconst USER_STORE_NAME = 'Users';\nexport class UserService {\n  constructor(http, dbService) {\n    this.http = http;\n    this.dbService = dbService;\n    const databaseRequest = dbService.getDatabase();\n    databaseRequest.onupgradeneeded = () => {\n      this.database = databaseRequest.result;\n      if (!this.database.objectStoreNames.contains(USER_STORE_NAME)) {\n        this.userStore = this.database.createObjectStore(USER_STORE_NAME, {\n          keyPath: 'id',\n          autoIncrement: true\n        });\n        if (!this.userStore.indexNames.contains('by_username')) {\n          this.userStore.createIndex('by_username', 'username');\n        }\n      }\n    };\n    databaseRequest.onsuccess = () => {\n      this.database = databaseRequest.result;\n      this.userStore = this.database.transaction(USER_STORE_NAME).objectStore(USER_STORE_NAME);\n    };\n    databaseRequest.onerror = () => {\n      const databaseError = databaseRequest.error;\n      console.error('some database request fail', databaseError);\n    };\n  }\n  register(form) {\n    var url = 'https://amigal.dk/webservices/v0a/user/register';\n    const body = {\n      \"username\": form.value.username,\n      \"password\": form.value.password,\n      \"name\": form.value.name\n    };\n    return this.http.post(url, body, httpOptions);\n  }\n  login(form) {\n    var url = 'https://amigal.dk/webservices/v0a/user/login';\n    const body = {\n      \"username\": form.value.username,\n      \"password\": form.value.password,\n      \"name\": form.value.name\n    };\n    return this.http.post(url, body, httpOptions);\n  }\n  isLoggedIn() {\n    console.log('userService isLoggedIn called', this.userStore);\n    const userRequest = this.dbService.get(this.userStore, IDBKeyRange.lowerBound(0));\n    userRequest.onsuccess = () => {\n      return userRequest.result.isLoggedIn;\n    };\n    userRequest.onerror = () => {\n      return false;\n    };\n  }\n}\nUserService.ɵfac = function UserService_Factory(t) {\n  return new (t || UserService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.DBServiceService));\n};\nUserService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: UserService,\n  factory: UserService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["HttpHeaders","httpOptions","responseType","observe","headers","DATABASE_NAME","DATABASE_VERSION","USER_STORE_NAME","UserService","constructor","http","dbService","databaseRequest","getDatabase","onupgradeneeded","database","result","objectStoreNames","contains","userStore","createObjectStore","keyPath","autoIncrement","indexNames","createIndex","onsuccess","transaction","objectStore","onerror","databaseError","error","console","register","form","url","body","value","username","password","name","post","login","isLoggedIn","log","userRequest","get","IDBKeyRange","lowerBound","i0","ɵɵinject","i1","HttpClient","i2","DBServiceService","factory","ɵfac","providedIn"],"sources":["/Volumes/Transcend/ionic/driver-log/src/app/user/user.service.ts"],"sourcesContent":["import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { DBServiceService } from '../shared-service/dbservice.service';\n\nconst httpOptions ={\n  responseType: 'json' as const,\n  observe: 'response' as const,\n  headers: new HttpHeaders({\n    \"Content-type\": 'application/json' as const,\n    'Accept': '*/*' as const,\n    'Access-Control-Allow-Origin': '*' as const,\n    'Referrer-Policy': 'origin-when-cross-origin' as const\n  })\n\n}\n\nconst DATABASE_NAME = 'UserBase';\nconst DATABASE_VERSION = 1;\nconst USER_STORE_NAME = 'Users';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UserService {\n\n  database: IDBDatabase;\n  userStore: IDBObjectStore;\n\n\n\n  constructor(private http: HttpClient, private dbService: DBServiceService) {\n    const databaseRequest = dbService.getDatabase();\n\n    databaseRequest.onupgradeneeded = () => {\n      this.database = databaseRequest.result;\n\n      if (!this.database.objectStoreNames.contains(USER_STORE_NAME)) {\n        this.userStore = this.database.createObjectStore(\n          USER_STORE_NAME,\n          { keyPath: 'id', autoIncrement: true }\n        );\n        if (!this.userStore.indexNames.contains('by_username')) {\n          this.userStore.createIndex('by_username', 'username');\n        }\n\n      }\n    }\n    databaseRequest.onsuccess = () => {\n      this.database = databaseRequest.result;\n\n     this.userStore = this.database.transaction(USER_STORE_NAME).objectStore(USER_STORE_NAME);\n    }\n\n    databaseRequest.onerror = () => {\n      const databaseError = databaseRequest.error;\n      console.error('some database request fail',databaseError);\n    }\n  }\n\n  register(form: FormGroup){\n    var url='https://amigal.dk/webservices/v0a/user/register';\n\n    const body = {\n      \"username\": form.value.username,\n      \"password\": form.value.password,\n      \"name\": form.value.name\n    }\n\n    return this.http.post(url,body,httpOptions);\n  }\n\n  login(form: FormGroup){\n    var url='https://amigal.dk/webservices/v0a/user/login';\n\n    const body = {\n      \"username\": form.value.username,\n      \"password\": form.value.password,\n      \"name\": form.value.name\n    }\n\n    return this.http.post(url,body,httpOptions);\n  }\n\n  isLoggedIn(){\n    console.log('userService isLoggedIn called', this.userStore);\n    const userRequest = this.dbService.get(this.userStore,IDBKeyRange.lowerBound(0));\n\n    userRequest.onsuccess = () => {\n      return userRequest.result.isLoggedIn;\n    }\n\n    userRequest.onerror = () => {\n      return false;\n    }\n\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}