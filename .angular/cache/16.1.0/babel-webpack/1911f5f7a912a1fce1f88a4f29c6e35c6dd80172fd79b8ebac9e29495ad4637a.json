{"ast":null,"code":"import _asyncToGenerator from \"/Volumes/Transcend/ionic/driver-log/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { HttpHeaders } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"../shared-service/dbservice.service\";\nconst httpOptions = {\n  responseType: 'json',\n  observe: 'response',\n  headers: new HttpHeaders({\n    'Content-type': 'application/json',\n    Accept: '*/*',\n    'Access-Control-Allow-Origin': '*',\n    'Referrer-Policy': 'origin-when-cross-origin'\n  })\n};\nconst DATABASE_NAME = 'UserBase';\nconst DATABASE_VERSION = 1;\nconst USER_STORE_NAME = 'Users';\nexport class UserService {\n  constructor(http, dbService) {\n    // const databaseRequest = dbService.getDatabase(DATABASE_NAME, DATABASE_VERSION);\n    this.http = http;\n    this.dbService = dbService;\n    // databaseRequest.onupgradeneeded = () => {\n    //   this.database = databaseRequest.result;\n    //   if (!this.database.objectStoreNames.contains(USER_STORE_NAME)) {\n    //     this.userStore = this.database.createObjectStore(\n    //       USER_STORE_NAME,\n    //       { keyPath: 'id', autoIncrement: true }\n    //     );\n    //     if (!this.userStore.indexNames.contains('by_username')) {\n    //       this.userStore.createIndex('by_username', 'username');\n    //     }\n    //   }\n    // }\n    // databaseRequest.onsuccess = () => {\n    //   this.database = databaseRequest.result;\n    //  this.userStore = this.database.transaction(USER_STORE_NAME).objectStore(USER_STORE_NAME);\n    // }\n    // databaseRequest.onerror = () => {\n    //   const databaseError = databaseRequest.error;\n    //   console.error('some database request fail',databaseError);\n    // }\n    this.init().then(value => {\n      console.log('succes ', value, this.database);\n    }, error => {\n      console.log('error ', error);\n    });\n  }\n  init() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      return new Promise((resolve, reject) => {\n        const databaseRequest = _this.dbService.getDatabase(DATABASE_NAME, DATABASE_VERSION);\n        databaseRequest.onupgradeneeded = () => {\n          _this.database = databaseRequest.result;\n          if (!_this.database.objectStoreNames.contains(USER_STORE_NAME)) {\n            _this.userStore = _this.database.createObjectStore(USER_STORE_NAME, {\n              keyPath: 'id',\n              autoIncrement: true\n            });\n            if (!_this.userStore.indexNames.contains('by_username')) {\n              _this.userStore.createIndex('by_username', 'username');\n            }\n          }\n        };\n        databaseRequest.onsuccess = () => {\n          _this.database = databaseRequest.result;\n          _this.userStore = _this.database.transaction(USER_STORE_NAME).objectStore(USER_STORE_NAME);\n          resolve(_this.database);\n        };\n        databaseRequest.onerror = () => {\n          const databaseError = databaseRequest.error;\n          console.error('some database request fail', databaseError);\n          reject(databaseError);\n        };\n      });\n    })();\n  }\n  ngOnInit() {\n    this.init().then(value => {\n      console.log('succes ', value, this.database);\n    }, error => {\n      console.log('error ', error);\n    });\n    // );\n    // const databaseRequest = this.dbService.getDatabase(\n    //   DATABASE_NAME,\n    //   DATABASE_VERSION\n    // );\n    // databaseRequest.onupgradeneeded = () => {\n    //   this.database = databaseRequest.result;\n    //   if (!this.database.objectStoreNames.contains(USER_STORE_NAME)) {\n    //     this.userStore = this.database.createObjectStore(USER_STORE_NAME, {\n    //       keyPath: 'id',\n    //       autoIncrement: true,\n    //     });\n    //     if (!this.userStore.indexNames.contains('by_username')) {\n    //       this.userStore.createIndex('by_username', 'username');\n    //     }\n    //   }\n    // };\n    // databaseRequest.onsuccess = () => {\n    //   this.database = databaseRequest.result;\n    //   this.userStore = this.database\n    //     .transaction(USER_STORE_NAME)\n    //     .objectStore(USER_STORE_NAME);\n    // };\n    // databaseRequest.onerror = () => {\n    //   const databaseError = databaseRequest.error;\n    //   console.error('some database request fail', databaseError);\n    // };\n  }\n\n  register(form) {\n    var url = 'https://amigal.dk/webservices/v0a/user/register';\n    const body = {\n      username: form.value.username,\n      password: form.value.password,\n      name: form.value.name\n    };\n    return this.http.post(url, body, httpOptions);\n  }\n  login(form) {\n    var url = 'https://amigal.dk/webservices/v0a/user/login';\n    const body = {\n      username: form.value.username,\n      password: form.value.password,\n      name: form.value.name\n    };\n    return this.http.post(url, body, httpOptions);\n  }\n  isLoggedIn() {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      console.log('userService isLoggedIn called', _this2.userStore, _this2.database);\n      // await this.init().then(\n      //   (value) => {\n      //     console.log('succes ', value, this.database);\n      //   },\n      //   (error) => {\n      //     console.log('error ', error);\n      //   }\n      // );\n      return new Promise((resolve, reject) => {\n        if (_this2.database) {\n          const databaseRequest = _this2.dbService.getDatabase(DATABASE_NAME, DATABASE_VERSION);\n        }\n        const userRequest = _this2.dbService.get(_this2.userStore, IDBKeyRange.lowerBound(0));\n        userRequest.onsuccess = () => {\n          if (userRequest.result) {\n            resolve(userRequest.result.isLoggedIn);\n          } else resolve(false);\n        };\n        userRequest.onerror = () => {\n          reject(false);\n        };\n      });\n    })();\n  }\n}\nUserService.ɵfac = function UserService_Factory(t) {\n  return new (t || UserService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.DBServiceService));\n};\nUserService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: UserService,\n  factory: UserService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["HttpHeaders","httpOptions","responseType","observe","headers","Accept","DATABASE_NAME","DATABASE_VERSION","USER_STORE_NAME","UserService","constructor","http","dbService","init","then","value","console","log","database","error","_this","_asyncToGenerator","Promise","resolve","reject","databaseRequest","getDatabase","onupgradeneeded","result","objectStoreNames","contains","userStore","createObjectStore","keyPath","autoIncrement","indexNames","createIndex","onsuccess","transaction","objectStore","onerror","databaseError","ngOnInit","register","form","url","body","username","password","name","post","login","isLoggedIn","_this2","userRequest","get","IDBKeyRange","lowerBound","i0","ɵɵinject","i1","HttpClient","i2","DBServiceService","factory","ɵfac","providedIn"],"sources":["/Volumes/Transcend/ionic/driver-log/src/app/user/user.service.ts"],"sourcesContent":["import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Injectable, OnInit } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { DBServiceService } from '../shared-service/dbservice.service';\nimport { timeout } from 'rxjs';\nimport { promises, resolve } from 'dns';\n\nconst httpOptions = {\n  responseType: 'json' as const,\n  observe: 'response' as const,\n  headers: new HttpHeaders({\n    'Content-type': 'application/json' as const,\n    Accept: '*/*' as const,\n    'Access-Control-Allow-Origin': '*' as const,\n    'Referrer-Policy': 'origin-when-cross-origin' as const,\n  }),\n};\n\nconst DATABASE_NAME = 'UserBase';\nconst DATABASE_VERSION = 1;\nconst USER_STORE_NAME = 'Users';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UserService implements OnInit {\n  database: IDBDatabase;\n  userStore: IDBObjectStore;\n\n  constructor(private http: HttpClient, private dbService: DBServiceService) {\n    // const databaseRequest = dbService.getDatabase(DATABASE_NAME, DATABASE_VERSION);\n\n    // databaseRequest.onupgradeneeded = () => {\n    //   this.database = databaseRequest.result;\n\n    //   if (!this.database.objectStoreNames.contains(USER_STORE_NAME)) {\n    //     this.userStore = this.database.createObjectStore(\n    //       USER_STORE_NAME,\n    //       { keyPath: 'id', autoIncrement: true }\n    //     );\n    //     if (!this.userStore.indexNames.contains('by_username')) {\n    //       this.userStore.createIndex('by_username', 'username');\n    //     }\n\n    //   }\n    // }\n    // databaseRequest.onsuccess = () => {\n    //   this.database = databaseRequest.result;\n\n    //  this.userStore = this.database.transaction(USER_STORE_NAME).objectStore(USER_STORE_NAME);\n    // }\n\n    // databaseRequest.onerror = () => {\n    //   const databaseError = databaseRequest.error;\n    //   console.error('some database request fail',databaseError);\n    // }\n\n    this.init().then(\n      (value) => {\n        console.log('succes ', value, this.database);\n\n      },\n      (error) => {\n        console.log('error ', error);\n      }\n    );\n  }\n\n  async init() {\n    return new Promise((resolve, reject) => {\n      const databaseRequest = this.dbService.getDatabase(\n        DATABASE_NAME,\n        DATABASE_VERSION\n      );\n\n      databaseRequest.onupgradeneeded = () => {\n        this.database = databaseRequest.result;\n\n        if (!this.database.objectStoreNames.contains(USER_STORE_NAME)) {\n          this.userStore = this.database.createObjectStore(USER_STORE_NAME, {\n            keyPath: 'id',\n            autoIncrement: true,\n          });\n          if (!this.userStore.indexNames.contains('by_username')) {\n            this.userStore.createIndex('by_username', 'username');\n          }\n        }\n      };\n      databaseRequest.onsuccess = () => {\n        this.database = databaseRequest.result;\n\n        this.userStore = this.database\n          .transaction(USER_STORE_NAME)\n          .objectStore(USER_STORE_NAME);\n        resolve(this.database);\n      };\n\n      databaseRequest.onerror = () => {\n        const databaseError = databaseRequest.error;\n        console.error('some database request fail', databaseError);\n        reject(databaseError);\n      };\n    });\n  }\n\n  ngOnInit(): void {\n    this.init().then(\n      (value) => {\n        console.log('succes ', value, this.database);\n\n      },\n      (error) => {\n        console.log('error ', error);\n      }\n    // );\n    // const databaseRequest = this.dbService.getDatabase(\n    //   DATABASE_NAME,\n    //   DATABASE_VERSION\n    // );\n\n    // databaseRequest.onupgradeneeded = () => {\n    //   this.database = databaseRequest.result;\n\n    //   if (!this.database.objectStoreNames.contains(USER_STORE_NAME)) {\n    //     this.userStore = this.database.createObjectStore(USER_STORE_NAME, {\n    //       keyPath: 'id',\n    //       autoIncrement: true,\n    //     });\n    //     if (!this.userStore.indexNames.contains('by_username')) {\n    //       this.userStore.createIndex('by_username', 'username');\n    //     }\n    //   }\n    // };\n    // databaseRequest.onsuccess = () => {\n    //   this.database = databaseRequest.result;\n\n    //   this.userStore = this.database\n    //     .transaction(USER_STORE_NAME)\n    //     .objectStore(USER_STORE_NAME);\n    // };\n\n    // databaseRequest.onerror = () => {\n    //   const databaseError = databaseRequest.error;\n    //   console.error('some database request fail', databaseError);\n    // };\n  }\n\n  register(form: FormGroup) {\n    var url = 'https://amigal.dk/webservices/v0a/user/register';\n\n    const body = {\n      username: form.value.username,\n      password: form.value.password,\n      name: form.value.name,\n    };\n\n    return this.http.post(url, body, httpOptions);\n  }\n\n  login(form: FormGroup) {\n    var url = 'https://amigal.dk/webservices/v0a/user/login';\n\n    const body = {\n      username: form.value.username,\n      password: form.value.password,\n      name: form.value.name,\n    };\n\n    return this.http.post(url, body, httpOptions);\n  }\n\n  async isLoggedIn(): Promise<boolean | string | any> {\n    console.log('userService isLoggedIn called', this.userStore, this.database);\n    // await this.init().then(\n    //   (value) => {\n    //     console.log('succes ', value, this.database);\n    //   },\n    //   (error) => {\n    //     console.log('error ', error);\n    //   }\n    // );\n\n    return new Promise<boolean>((resolve, reject) => {\n      if (this.database) {\n        const databaseRequest = this.dbService.getDatabase(\n          DATABASE_NAME,\n          DATABASE_VERSION\n        );\n      }\n      const userRequest = this.dbService.get(\n        this.userStore,\n        IDBKeyRange.lowerBound(0)\n      );\n\n      userRequest.onsuccess = () => {\n        if (userRequest.result) {\n          resolve(userRequest.result.isLoggedIn);\n        } else resolve(false);\n      };\n\n      userRequest.onerror = () => {\n        reject(false);\n      };\n    });\n  }\n}\n"],"mappings":";AAAA,SAAqBA,WAAW,QAAQ,sBAAsB;;;;AAO9D,MAAMC,WAAW,GAAG;EAClBC,YAAY,EAAE,MAAe;EAC7BC,OAAO,EAAE,UAAmB;EAC5BC,OAAO,EAAE,IAAIJ,WAAW,CAAC;IACvB,cAAc,EAAE,kBAA2B;IAC3CK,MAAM,EAAE,KAAc;IACtB,6BAA6B,EAAE,GAAY;IAC3C,iBAAiB,EAAE;GACpB;CACF;AAED,MAAMC,aAAa,GAAG,UAAU;AAChC,MAAMC,gBAAgB,GAAG,CAAC;AAC1B,MAAMC,eAAe,GAAG,OAAO;AAK/B,OAAM,MAAOC,WAAW;EAItBC,YAAoBC,IAAgB,EAAUC,SAA2B;IACvE;IADkB,KAAAD,IAAI,GAAJA,IAAI;IAAsB,KAAAC,SAAS,GAATA,SAAS;IAGrD;IACA;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IAEA;IACA;IACA;IACA;IAEA;IACA;IAEA;IACA;IACA;IACA;IAEA,IAAI,CAACC,IAAI,EAAE,CAACC,IAAI,CACbC,KAAK,IAAI;MACRC,OAAO,CAACC,GAAG,CAAC,SAAS,EAAEF,KAAK,EAAE,IAAI,CAACG,QAAQ,CAAC;IAE9C,CAAC,EACAC,KAAK,IAAI;MACRH,OAAO,CAACC,GAAG,CAAC,QAAQ,EAAEE,KAAK,CAAC;IAC9B,CAAC,CACF;EACH;EAEMN,IAAIA,CAAA;IAAA,IAAAO,KAAA;IAAA,OAAAC,iBAAA;MACR,OAAO,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAI;QACrC,MAAMC,eAAe,GAAGL,KAAI,CAACR,SAAS,CAACc,WAAW,CAChDpB,aAAa,EACbC,gBAAgB,CACjB;QAEDkB,eAAe,CAACE,eAAe,GAAG,MAAK;UACrCP,KAAI,CAACF,QAAQ,GAAGO,eAAe,CAACG,MAAM;UAEtC,IAAI,CAACR,KAAI,CAACF,QAAQ,CAACW,gBAAgB,CAACC,QAAQ,CAACtB,eAAe,CAAC,EAAE;YAC7DY,KAAI,CAACW,SAAS,GAAGX,KAAI,CAACF,QAAQ,CAACc,iBAAiB,CAACxB,eAAe,EAAE;cAChEyB,OAAO,EAAE,IAAI;cACbC,aAAa,EAAE;aAChB,CAAC;YACF,IAAI,CAACd,KAAI,CAACW,SAAS,CAACI,UAAU,CAACL,QAAQ,CAAC,aAAa,CAAC,EAAE;cACtDV,KAAI,CAACW,SAAS,CAACK,WAAW,CAAC,aAAa,EAAE,UAAU,CAAC;;;QAG3D,CAAC;QACDX,eAAe,CAACY,SAAS,GAAG,MAAK;UAC/BjB,KAAI,CAACF,QAAQ,GAAGO,eAAe,CAACG,MAAM;UAEtCR,KAAI,CAACW,SAAS,GAAGX,KAAI,CAACF,QAAQ,CAC3BoB,WAAW,CAAC9B,eAAe,CAAC,CAC5B+B,WAAW,CAAC/B,eAAe,CAAC;UAC/Be,OAAO,CAACH,KAAI,CAACF,QAAQ,CAAC;QACxB,CAAC;QAEDO,eAAe,CAACe,OAAO,GAAG,MAAK;UAC7B,MAAMC,aAAa,GAAGhB,eAAe,CAACN,KAAK;UAC3CH,OAAO,CAACG,KAAK,CAAC,4BAA4B,EAAEsB,aAAa,CAAC;UAC1DjB,MAAM,CAACiB,aAAa,CAAC;QACvB,CAAC;MACH,CAAC,CAAC;IAAC;EACL;EAEAC,QAAQA,CAAA;IACN,IAAI,CAAC7B,IAAI,EAAE,CAACC,IAAI,CACbC,KAAK,IAAI;MACRC,OAAO,CAACC,GAAG,CAAC,SAAS,EAAEF,KAAK,EAAE,IAAI,CAACG,QAAQ,CAAC;IAE9C,CAAC,EACAC,KAAK,IAAI;MACRH,OAAO,CAACC,GAAG,CAAC,QAAQ,EAAEE,KAAK,CAAC;IAC9B,CAAC;IACH;IACA;IACA;IACA;IACA;IAEA;IACA;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IAEA;IACA;IACA;IACA;IAEA;IACA;IACA;IACA;EACF;;EAEAwB,QAAQA,CAACC,IAAe;IACtB,IAAIC,GAAG,GAAG,iDAAiD;IAE3D,MAAMC,IAAI,GAAG;MACXC,QAAQ,EAAEH,IAAI,CAAC7B,KAAK,CAACgC,QAAQ;MAC7BC,QAAQ,EAAEJ,IAAI,CAAC7B,KAAK,CAACiC,QAAQ;MAC7BC,IAAI,EAAEL,IAAI,CAAC7B,KAAK,CAACkC;KAClB;IAED,OAAO,IAAI,CAACtC,IAAI,CAACuC,IAAI,CAACL,GAAG,EAAEC,IAAI,EAAE7C,WAAW,CAAC;EAC/C;EAEAkD,KAAKA,CAACP,IAAe;IACnB,IAAIC,GAAG,GAAG,8CAA8C;IAExD,MAAMC,IAAI,GAAG;MACXC,QAAQ,EAAEH,IAAI,CAAC7B,KAAK,CAACgC,QAAQ;MAC7BC,QAAQ,EAAEJ,IAAI,CAAC7B,KAAK,CAACiC,QAAQ;MAC7BC,IAAI,EAAEL,IAAI,CAAC7B,KAAK,CAACkC;KAClB;IAED,OAAO,IAAI,CAACtC,IAAI,CAACuC,IAAI,CAACL,GAAG,EAAEC,IAAI,EAAE7C,WAAW,CAAC;EAC/C;EAEMmD,UAAUA,CAAA;IAAA,IAAAC,MAAA;IAAA,OAAAhC,iBAAA;MACdL,OAAO,CAACC,GAAG,CAAC,+BAA+B,EAAEoC,MAAI,CAACtB,SAAS,EAAEsB,MAAI,CAACnC,QAAQ,CAAC;MAC3E;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MAEA,OAAO,IAAII,OAAO,CAAU,CAACC,OAAO,EAAEC,MAAM,KAAI;QAC9C,IAAI6B,MAAI,CAACnC,QAAQ,EAAE;UACjB,MAAMO,eAAe,GAAG4B,MAAI,CAACzC,SAAS,CAACc,WAAW,CAChDpB,aAAa,EACbC,gBAAgB,CACjB;;QAEH,MAAM+C,WAAW,GAAGD,MAAI,CAACzC,SAAS,CAAC2C,GAAG,CACpCF,MAAI,CAACtB,SAAS,EACdyB,WAAW,CAACC,UAAU,CAAC,CAAC,CAAC,CAC1B;QAEDH,WAAW,CAACjB,SAAS,GAAG,MAAK;UAC3B,IAAIiB,WAAW,CAAC1B,MAAM,EAAE;YACtBL,OAAO,CAAC+B,WAAW,CAAC1B,MAAM,CAACwB,UAAU,CAAC;WACvC,MAAM7B,OAAO,CAAC,KAAK,CAAC;QACvB,CAAC;QAED+B,WAAW,CAACd,OAAO,GAAG,MAAK;UACzBhB,MAAM,CAAC,KAAK,CAAC;QACf,CAAC;MACH,CAAC,CAAC;IAAC;EACL;;AAnLWf,WAAW,C;mBAAXA,WAAW,EAAAiD,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,gBAAA;AAAA;AAAXtD,WAAW,C;SAAXA,WAAW;EAAAuD,OAAA,EAAXvD,WAAW,CAAAwD,IAAA;EAAAC,UAAA,EAFV;AAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}