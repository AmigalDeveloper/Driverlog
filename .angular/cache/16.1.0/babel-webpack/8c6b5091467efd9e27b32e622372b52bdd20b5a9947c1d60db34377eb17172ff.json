{"ast":null,"code":"import _asyncToGenerator from \"/Volumes/Transcend/ionic/driver-log/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { HttpHeaders } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"../shared-service/dbservice.service\";\nconst httpOptions = {\n  responseType: 'json',\n  observe: 'response',\n  headers: new HttpHeaders({\n    'Content-type': 'application/json',\n    Accept: '*/*',\n    'Access-Control-Allow-Origin': '*',\n    'Referrer-Policy': 'origin-when-cross-origin'\n  })\n};\nconst DATABASE_NAME = 'UserBase';\nconst DATABASE_VERSION = 1;\nconst USER_STORE_NAME = 'Users';\nexport class UserService {\n  constructor(http, dbService) {\n    // this.init().then(\n    //   (value) => {\n    //     console.log('succes ', value, this.database);\n    this.http = http;\n    this.dbService = dbService;\n    //   },\n    //   (error) => {\n    //     console.log('error ', error);\n    //   }\n    // );\n  }\n\n  init() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      return new Promise((resolve, reject) => {\n        const databaseRequest = _this.dbService.getDatabase(DATABASE_NAME, DATABASE_VERSION);\n        databaseRequest.onupgradeneeded = () => {\n          _this.database = databaseRequest.result;\n          if (!_this.database.objectStoreNames.contains(USER_STORE_NAME)) {\n            _this.userStore = _this.database.createObjectStore(USER_STORE_NAME, {\n              keyPath: 'id',\n              autoIncrement: true\n            });\n            if (!_this.userStore.indexNames.contains('by_username')) {\n              _this.userStore.createIndex('by_username', 'username');\n            }\n          }\n        };\n        databaseRequest.onsuccess = () => {\n          _this.database = databaseRequest.result;\n          _this.userStore = _this.database.transaction(USER_STORE_NAME).objectStore(USER_STORE_NAME);\n          resolve(_this.database);\n        };\n        databaseRequest.onerror = () => {\n          const databaseError = databaseRequest.error;\n          console.error('some database request fail', databaseError);\n          reject(databaseError);\n        };\n      });\n    })();\n  }\n  ngOnInit() {\n    this.init().then(value => {\n      console.log('succes ', value, this.database);\n    }, error => {\n      console.log('error ', error);\n    });\n    // const databaseRequest = this.dbService.getDatabase(\n    //   DATABASE_NAME,\n    //   DATABASE_VERSION\n    // );\n    // databaseRequest.onupgradeneeded = () => {\n    //   this.database = databaseRequest.result;\n    //   if (!this.database.objectStoreNames.contains(USER_STORE_NAME)) {\n    //     this.userStore = this.database.createObjectStore(USER_STORE_NAME, {\n    //       keyPath: 'id',\n    //       autoIncrement: true,\n    //     });\n    //     if (!this.userStore.indexNames.contains('by_username')) {\n    //       this.userStore.createIndex('by_username', 'username');\n    //     }\n    //   }\n    // };\n    // databaseRequest.onsuccess = () => {\n    //   this.database = databaseRequest.result;\n    //   this.userStore = this.database\n    //     .transaction(USER_STORE_NAME)\n    //     .objectStore(USER_STORE_NAME);\n    // };\n    // databaseRequest.onerror = () => {\n    //   const databaseError = databaseRequest.error;\n    //   console.error('some database request fail', databaseError);\n    // };\n  }\n\n  register(form) {\n    var url = 'https://amigal.dk/webservices/v0a/user/register';\n    const body = {\n      username: form.value.username,\n      password: form.value.password,\n      name: form.value.name\n    };\n    return this.http.post(url, body, httpOptions);\n  }\n  login(form) {\n    var url = 'https://amigal.dk/webservices/v0a/user/login';\n    const body = {\n      username: form.value.username,\n      password: form.value.password,\n      name: form.value.name\n    };\n    return this.http.post(url, body, httpOptions);\n  }\n  isLoggedIn() {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      console.log('userService isLoggedIn called', _this2.userStore, _this2.database);\n      yield _this2.init().then(value => {\n        console.log('succes ', value, _this2.database);\n      }, error => {\n        console.log('error ', error);\n      });\n      return new Promise((resolve, reject) => {\n        if (_this2.database) {\n          const databaseRequest = _this2.dbService.getDatabase(DATABASE_NAME, DATABASE_VERSION);\n        }\n        const userRequest = _this2.dbService.get(_this2.userStore, IDBKeyRange.lowerBound(0));\n        userRequest.onsuccess = () => {\n          if (userRequest.result) {\n            resolve(userRequest.result.isLoggedIn);\n          } else resolve(false);\n        };\n        userRequest.onerror = () => {\n          reject(false);\n        };\n      });\n    })();\n  }\n}\nUserService.ɵfac = function UserService_Factory(t) {\n  return new (t || UserService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.DBServiceService));\n};\nUserService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: UserService,\n  factory: UserService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["HttpHeaders","httpOptions","responseType","observe","headers","Accept","DATABASE_NAME","DATABASE_VERSION","USER_STORE_NAME","UserService","constructor","http","dbService","init","_this","_asyncToGenerator","Promise","resolve","reject","databaseRequest","getDatabase","onupgradeneeded","database","result","objectStoreNames","contains","userStore","createObjectStore","keyPath","autoIncrement","indexNames","createIndex","onsuccess","transaction","objectStore","onerror","databaseError","error","console","ngOnInit","then","value","log","register","form","url","body","username","password","name","post","login","isLoggedIn","_this2","userRequest","get","IDBKeyRange","lowerBound","i0","ɵɵinject","i1","HttpClient","i2","DBServiceService","factory","ɵfac","providedIn"],"sources":["/Volumes/Transcend/ionic/driver-log/src/app/user/user.service.ts"],"sourcesContent":["import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Injectable, OnInit } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { DBServiceService } from '../shared-service/dbservice.service';\nimport { timeout } from 'rxjs';\nimport { promises, resolve } from 'dns';\n\nconst httpOptions = {\n  responseType: 'json' as const,\n  observe: 'response' as const,\n  headers: new HttpHeaders({\n    'Content-type': 'application/json' as const,\n    Accept: '*/*' as const,\n    'Access-Control-Allow-Origin': '*' as const,\n    'Referrer-Policy': 'origin-when-cross-origin' as const,\n  }),\n};\n\nconst DATABASE_NAME = 'UserBase';\nconst DATABASE_VERSION = 1;\nconst USER_STORE_NAME = 'Users';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UserService implements OnInit {\n  database: IDBDatabase;\n  userStore: IDBObjectStore;\n\n  constructor(private http: HttpClient, private dbService: DBServiceService) {\n\n    // this.init().then(\n    //   (value) => {\n    //     console.log('succes ', value, this.database);\n\n    //   },\n    //   (error) => {\n    //     console.log('error ', error);\n    //   }\n    // );\n  }\n\n  async init() {\n    return new Promise((resolve, reject) => {\n      const databaseRequest = this.dbService.getDatabase(\n        DATABASE_NAME,\n        DATABASE_VERSION\n      );\n\n      databaseRequest.onupgradeneeded = () => {\n        this.database = databaseRequest.result;\n\n        if (!this.database.objectStoreNames.contains(USER_STORE_NAME)) {\n          this.userStore = this.database.createObjectStore(USER_STORE_NAME, {\n            keyPath: 'id',\n            autoIncrement: true,\n          });\n          if (!this.userStore.indexNames.contains('by_username')) {\n            this.userStore.createIndex('by_username', 'username');\n          }\n        }\n      };\n      databaseRequest.onsuccess = () => {\n        this.database = databaseRequest.result;\n\n        this.userStore = this.database\n          .transaction(USER_STORE_NAME)\n          .objectStore(USER_STORE_NAME);\n        resolve(this.database);\n      };\n\n      databaseRequest.onerror = () => {\n        const databaseError = databaseRequest.error;\n        console.error('some database request fail', databaseError);\n        reject(databaseError);\n      };\n    });\n  }\n\n  ngOnInit(): void {\n    this.init().then(\n      (value) => {\n        console.log('succes ', value, this.database);\n\n      },\n      (error) => {\n        console.log('error ', error);\n      }\n    );\n    // const databaseRequest = this.dbService.getDatabase(\n    //   DATABASE_NAME,\n    //   DATABASE_VERSION\n    // );\n\n    // databaseRequest.onupgradeneeded = () => {\n    //   this.database = databaseRequest.result;\n\n    //   if (!this.database.objectStoreNames.contains(USER_STORE_NAME)) {\n    //     this.userStore = this.database.createObjectStore(USER_STORE_NAME, {\n    //       keyPath: 'id',\n    //       autoIncrement: true,\n    //     });\n    //     if (!this.userStore.indexNames.contains('by_username')) {\n    //       this.userStore.createIndex('by_username', 'username');\n    //     }\n    //   }\n    // };\n    // databaseRequest.onsuccess = () => {\n    //   this.database = databaseRequest.result;\n\n    //   this.userStore = this.database\n    //     .transaction(USER_STORE_NAME)\n    //     .objectStore(USER_STORE_NAME);\n    // };\n\n    // databaseRequest.onerror = () => {\n    //   const databaseError = databaseRequest.error;\n    //   console.error('some database request fail', databaseError);\n    // };\n  }\n\n  register(form: FormGroup) {\n    var url = 'https://amigal.dk/webservices/v0a/user/register';\n\n    const body = {\n      username: form.value.username,\n      password: form.value.password,\n      name: form.value.name,\n    };\n\n    return this.http.post(url, body, httpOptions);\n  }\n\n  login(form: FormGroup) {\n    var url = 'https://amigal.dk/webservices/v0a/user/login';\n\n    const body = {\n      username: form.value.username,\n      password: form.value.password,\n      name: form.value.name,\n    };\n\n    return this.http.post(url, body, httpOptions);\n  }\n\n  async isLoggedIn(): Promise<boolean | string | any> {\n    console.log('userService isLoggedIn called', this.userStore, this.database);\n    await this.init().then(\n      (value) => {\n        console.log('succes ', value, this.database);\n      },\n      (error) => {\n        console.log('error ', error);\n      }\n    );\n\n    return new Promise<boolean>((resolve, reject) => {\n      if (this.database) {\n        const databaseRequest = this.dbService.getDatabase(\n          DATABASE_NAME,\n          DATABASE_VERSION\n        );\n      }\n      const userRequest = this.dbService.get(\n        this.userStore,\n        IDBKeyRange.lowerBound(0)\n      );\n\n      userRequest.onsuccess = () => {\n        if (userRequest.result) {\n          resolve(userRequest.result.isLoggedIn);\n        } else resolve(false);\n      };\n\n      userRequest.onerror = () => {\n        reject(false);\n      };\n    });\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}