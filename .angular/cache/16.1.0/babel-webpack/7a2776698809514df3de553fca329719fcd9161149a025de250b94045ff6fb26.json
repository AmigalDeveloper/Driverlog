{"ast":null,"code":"import _asyncToGenerator from \"/Volumes/Transcend/ionic/driver-log/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { BehaviorSubject } from 'rxjs';\nimport { LogEntry } from './log-entry';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../shared-service/dbservice.service\";\nconst DATABASE_NAME = 'DriverLogsBase';\nconst DATABASE_VERSION = 1;\nconst LOG_ENTRIES_STORE_NAME = 'LogEntries';\nconst FUEL_ENTRIES_STORE_NAME = 'FuelEntries';\nexport class LogEntriesService {\n  constructor(dbService) {\n    this.dbService = dbService;\n    this.logEntries = new BehaviorSubject(new LogEntry());\n    dbService.init();\n    this.init();\n  } // End of constructor\n  init() {\n    // initalizering\n    const databaseRequest = this.dbService.getDatabase(DATABASE_NAME, DATABASE_VERSION);\n    console.log('databaseRequest init:', databaseRequest);\n    console.log('timestamp', new Date().toISOString());\n    databaseRequest.onupgradeneeded = () => {\n      console.log('databaRequest init logEntries.service', databaseRequest);\n      this.database = databaseRequest.result;\n      if (!this.database.objectStoreNames.contains(LOG_ENTRIES_STORE_NAME)) {\n        this.logEntriesStore = this.database.createObjectStore(LOG_ENTRIES_STORE_NAME, {\n          keyPath: 'id',\n          autoIncrement: true\n        });\n        if (!this.logEntriesStore.indexNames.contains('by_date')) {\n          this.logEntriesStore.createIndex('by_date', 'date');\n        }\n        if (!this.logEntriesStore.indexNames.contains('by_fuel')) {\n          this.logEntriesStore.createIndex('by_fuel', 'fuel');\n        }\n        if (!this.logEntriesStore.indexNames.contains('by_description')) {\n          this.logEntriesStore.createIndex('by_description', 'description');\n        }\n        if (!this.logEntriesStore.indexNames.contains('by_timestamp')) {\n          this.logEntriesStore.createIndex('by_timestamp', 'timestamp');\n        }\n      }\n      if (!this.database.objectStoreNames.contains(FUEL_ENTRIES_STORE_NAME)) {\n        // if FUEL_ENTRIES_STORE_NAME isn't created, then create it\n        this.fuelEntriesStore = this.database.createObjectStore(FUEL_ENTRIES_STORE_NAME, {\n          autoIncrement: true\n        });\n        if (!this.fuelEntriesStore.indexNames.contains('by_logEntryID')) {\n          // if index for FUEL_ENTRIES_STORE_NAME isn't created, then create it\n          this.fuelEntriesStore.createIndex('by_logEntryID', 'logEntryID');\n        }\n        if (!this.fuelEntriesStore.indexNames.contains('by_timestamp')) {\n          this.fuelEntriesStore.createIndex('by_timestamp', 'timestamp');\n        }\n      }\n    }; // end of databaseReuest.onupgradeneeded\n    databaseRequest.onsuccess = () => {\n      console.log('databaRequest init logEntries.service', databaseRequest);\n      this.database = databaseRequest.result;\n      if (!this.database.objectStoreNames.contains(FUEL_ENTRIES_STORE_NAME)) {\n        // if FUEL_ENTRIES_STORE_NAME isn't created, then create it\n        this.fuelEntriesStore = this.database.createObjectStore(FUEL_ENTRIES_STORE_NAME, {\n          keyPath: 'id',\n          autoIncrement: true\n        });\n        if (!this.fuelEntriesStore.indexNames.contains('by_logEntryID')) {\n          // if index for FUEL_ENTRIES_STORE_NAME isn't created, then create it\n          this.fuelEntriesStore.createIndex('by_logEntryID', 'logEntryID');\n        }\n        if (!this.fuelEntriesStore.indexNames.contains('by_timestamp')) {\n          this.fuelEntriesStore.createIndex('by_timestamp', 'timeStamp');\n        }\n      }\n    }; // end of databaseReuest.onsucces\n    databaseRequest.onerror = () => {\n      const error = databaseRequest.error;\n      console.error('getDatabase failed in init logentriesService', error);\n    };\n  } // end of initalizering\n  get distanceEnd() {\n    return this.lastDistanceEnd;\n  }\n  /* @name getEntries\n   *  @param: none\n   *  @return: (observable) logEntries\n   */\n  getEntries() {\n    return this.logEntries.asObservable();\n  }\n  /* @name updateEntries\n   *  @param: LogEntry\n   *  @return: void\n   */\n  updateEntries(logEntry) {\n    this.logEntries.next(logEntry);\n  } // End og getEntries\n  /*\n   * @name put\n   * @param: logEntry: LogEntry\n   * @return: async promise: LogEntry\n   * @ description:\n   * Store the LogEntry there are created\n   *\n   */\n  put(logEntry) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      return new Promise((_resolve, reject) => {\n        console.log('logEntries.put this.database', _this.database);\n        const tx = _this.database.transaction([LOG_ENTRIES_STORE_NAME, FUEL_ENTRIES_STORE_NAME], 'readwrite'); // get transaction start\n        // did crete of transaction failed\n        tx.onerror = () => {\n          console.error('tx fejler', tx.error);\n          console.error('tx: ', tx);\n          tx.abort(); //abort the transaction\n        };\n        // store  logEntryDetail\n        const logEntryDetail = {\n          ...logEntry.LogEntryDetail,\n          timestamp: !logEntry.LogEntryDetail.timestamp ? new Date().toISOString() : logEntry.LogEntryDetail.timestamp\n        };\n        // store the LogEntry in database\n        const logEntryRequest = _this.dbService.put(tx.objectStore(LOG_ENTRIES_STORE_NAME), logEntryDetail);\n        logEntryRequest.onsuccess = /*#__PURE__*/_asyncToGenerator(function* () {\n          // when it success\n          const logEntryID = logEntryRequest.result; // save the Key\n          logEntry.setLogEntryDetail({\n            ...logEntryDetail,\n            id: logEntryID\n          });\n          if (logEntry.LogEntryDetail.fuel) {\n            // if fuel is sat, then then add logEntryID to fuelEntryDetai\n            const distance = yield _this.getDistanceFuel(tx, logEntryDetail); // find the distance from last fuel\n            const fuelEntryDetail = {\n              ...logEntry.FuelEntryDetail,\n              logEntryID,\n              distance: Number(distance).valueOf(),\n              timestamp: !logEntry.fuelEntryDetail.timestamp ? new Date().toISOString() : logEntry.fuelEntryDetail.timestamp\n            };\n            // store fuelEntryDetail\n            const fuelRequst = _this.dbService.put(tx.objectStore(FUEL_ENTRIES_STORE_NAME), fuelEntryDetail);\n            // did fuelEntryDetail been storred\n            fuelRequst.onsuccess = () => {\n              const result = fuelRequst.result;\n              console.log('fuelEntry data is saved', result);\n              logEntry.setFuelEntryDetail({\n                ...fuelEntryDetail,\n                id: result\n              });\n              tx.commit(); // commit the transaction\n            }; // fuelRequest.onsucces\n            // didn't fuelEntryDetail stored\n            fuelRequst.onerror = () => {\n              tx.abort(); // abort the trasaction\n            }; // fuelRequest.onerror\n          }\n        }); // logEntryRequest.onSuccess\n        // didn't logEntryDetail been stored\n        logEntryRequest.onerror = () => {\n          const error = logEntryRequest.error;\n          console.error(' save logEntry fejler', error);\n          tx.abort(); // bort the transaction\n        }; // logEntryRequest.onerror\n        // the transaction been completed\n        tx.oncomplete = () => {\n          console.log('put is completes');\n          _this.updateEntries(logEntry); // update logEntries\n          _resolve(logEntry); // return the logEntry there are been stored\n          // return logEntry;\n        };\n\n        tx.onabort = () => {\n          console.error('save the logEntry data has fault', tx.error);\n          reject(tx.error);\n          // return tx.error;\n        };\n      });\n    })();\n  } // end of put\n  delete(logEntryKey) {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      const tx = _this2.database.transaction([LOG_ENTRIES_STORE_NAME, FUEL_ENTRIES_STORE_NAME], 'readwrite');\n      tx.oncomplete = () => {\n        console.log('logEntry with key ' + logEntryKey + ' is deleted');\n      };\n      tx.onerror = () => {\n        console.error('delete of logEntry with key ' + logEntryKey + 'is failed', tx.error);\n      };\n      const logEntryStore = tx.objectStore(LOG_ENTRIES_STORE_NAME);\n      const logEntryRequest = logEntryStore.get(logEntryKey);\n      logEntryRequest.onerror = () => {\n        console.error('can\\'t get the logentry record', logEntryRequest.error);\n        tx.abort();\n      };\n      logEntryRequest.onsuccess = () => {\n        const logEntry = logEntryRequest.result;\n        if (logEntry.fuel) {\n          const fuelStore = tx.objectStore(FUEL_ENTRIES_STORE_NAME);\n          const fuelKey = fuelStore.index('by_logEntryID').getKey(logEntry.id);\n          fuelKey.onsuccess = () => {\n            console.log('fuelkey is ' + fuelKey.result);\n            if (fuelKey.result !== undefined && fuelKey.result) fuelStore.delete(fuelKey.result);\n          };\n          fuelKey.onerror = () => {\n            console.error(\"Can't find the key\" + logEntryKey, fuelKey.error);\n          };\n        }\n        const logEntryDeleteRequest = logEntryStore.delete(logEntryKey);\n        logEntryDeleteRequest.onsuccess = () => {\n          console.log('logEntry with key ' + logEntryKey + ' is deleted', logEntryDeleteRequest.result);\n        };\n      };\n    })();\n  }\n  /* @name: getAllData\n   *  @param: none\n   *  @return: Array of LogEntry\n   */\n  getAllData() {\n    console.log('getAllData this.db', this.dbService);\n    const databaseRequest = this.dbService.getDatabase(DATABASE_NAME, DATABASE_VERSION);\n    //const data: Array<LogEntry> = new Array();\n    databaseRequest.onsuccess = () => {\n      const db = databaseRequest.result;\n      const tx = db.transaction([LOG_ENTRIES_STORE_NAME, FUEL_ENTRIES_STORE_NAME], 'readwrite');\n      const logEntryStore = tx.objectStore(LOG_ENTRIES_STORE_NAME).openCursor();\n      logEntryStore.onerror = () => {\n        console.error('Failed to open cursor', logEntryStore.error);\n        tx.abort();\n      };\n      logEntryStore.onsuccess = () => {\n        const cursor = logEntryStore.result;\n        if (cursor) {\n          if (cursor.value.fuel) {\n            const logEntryKey = cursor.key; // get logEntryDetails key\n            // get the fuelEntryDetail record by key\n            const fuelEntryReq = tx.objectStore(FUEL_ENTRIES_STORE_NAME).index('by_logEntryID').get(logEntryKey);\n            // when get the fuelEntryDetail record, then add record to logEntry\n            fuelEntryReq.onsuccess = () => {\n              const fuelEntryDetail = fuelEntryReq.result;\n              const logEntryDetail = cursor.value;\n              const logEntry = new LogEntry();\n              logEntry.setLogEntryDetail(logEntryDetail);\n              logEntry.setFuelEntryDetail(fuelEntryDetail);\n              fuelEntryReq.onerror = () => {\n                const error = fuelEntryReq.error;\n                console.log('get fuel failed', error);\n              };\n              this.updateEntries(logEntry); // send logEntry to logEntries\n            };\n          } else {\n            const logEntry = new LogEntry();\n            logEntry.setLogEntryDetail(cursor.value);\n            //data.push(logEntry);\n            this.updateEntries(logEntry);\n          }\n          cursor.continue();\n        } else {\n          tx.commit(); // all Entries is read and comfirm\n        }\n      };\n\n      tx.oncomplete = () => {\n        console.log('getAll data complete');\n      };\n    }; // end of getAll\n  }\n  /*\n   * @name: getDistance\n   * @param transaction  * the transaction where this should be a part of\n   * @param logEntry     * the logEntry where is the end logentry\n   * @return Promise<Number>\n   */\n  getDistanceFuel(transaction, logEntry) {\n    return _asyncToGenerator(function* () {\n      // get distance betwwen fuel\n      // for update record then we get the keyrange not newer then timestamp\n      const keyRangeValue = IDBKeyRange.upperBound(logEntry.timestamp, true);\n      // create af promise for aync response\n      return yield new Promise((resolve, reject) => {\n        // get the record with the last timestamp in fuelEntriesStore\n        const fuelIndexCursor = transaction.objectStore(FUEL_ENTRIES_STORE_NAME).index('by_timestamp').openCursor(keyRangeValue, 'prev');\n        //initalize the distance variable\n        let tempDistance = null;\n        let tempStartDistance = null;\n        let tempEndDistance;\n        let fuelCursor; // initalize the fuelCursor\n        tempEndDistance = logEntry.distanceEnd; // let endDistance be ditanceEnd of this logEntry record\n        fuelIndexCursor.onsuccess = () => {\n          // is there created a cursor on fuelEntriesStore\n          fuelCursor = fuelIndexCursor.result; // let fuelCursor be the cursor\n          if (fuelCursor) {\n            // if there some values on the cursor then\n            const logEntryID = fuelCursor.value.logEntryID; // the logEntryID for the last fuel entry\n            if (logEntryID === logEntry.id) {\n              fuelCursor.continue();\n            } else {\n              // get the logEntry that have relation for the last fuel entry\n              const entryRequest = transaction.objectStore(LOG_ENTRIES_STORE_NAME).get(logEntryID);\n              entryRequest.onsuccess = () => {\n                // if we get af value, then\n                tempStartDistance = entryRequest.result.distanceEnd; // let the startDistance be the distanceEnd for last fuel\n                tempDistance = tempEndDistance - tempStartDistance; // calculate the distance\n                console.log('return distance', tempDistance);\n                resolve(tempDistance); // return the distance\n              };\n\n              entryRequest.onerror = () => {\n                const error = entryRequest.error;\n                console.error('get last distanceEd failed', error);\n                transaction.abort();\n              };\n            }\n          } else {\n            console.log('no more fuel entries', fuelCursor);\n            resolve(tempEndDistance - 0);\n          }\n        };\n        fuelIndexCursor.onerror = () => {\n          const fuelError = fuelIndexCursor.error;\n          console.error('get Distance open fuelCursor failed', fuelError);\n          reject(fuelError);\n        };\n      });\n    })();\n  }\n}\nLogEntriesService.ɵfac = function LogEntriesService_Factory(t) {\n  return new (t || LogEntriesService)(i0.ɵɵinject(i1.DBServiceService));\n};\nLogEntriesService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: LogEntriesService,\n  factory: LogEntriesService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["BehaviorSubject","LogEntry","DATABASE_NAME","DATABASE_VERSION","LOG_ENTRIES_STORE_NAME","FUEL_ENTRIES_STORE_NAME","LogEntriesService","constructor","dbService","logEntries","init","databaseRequest","getDatabase","console","log","Date","toISOString","onupgradeneeded","database","result","objectStoreNames","contains","logEntriesStore","createObjectStore","keyPath","autoIncrement","indexNames","createIndex","fuelEntriesStore","onsuccess","onerror","error","distanceEnd","lastDistanceEnd","getEntries","asObservable","updateEntries","logEntry","next","put","_this","_asyncToGenerator","Promise","_resolve","reject","tx","transaction","abort","logEntryDetail","LogEntryDetail","timestamp","logEntryRequest","objectStore","logEntryID","setLogEntryDetail","id","fuel","distance","getDistanceFuel","fuelEntryDetail","FuelEntryDetail","Number","valueOf","fuelRequst","setFuelEntryDetail","commit","oncomplete","onabort","delete","logEntryKey","_this2","logEntryStore","get","fuelStore","fuelKey","index","getKey","undefined","logEntryDeleteRequest","getAllData","db","openCursor","cursor","value","key","fuelEntryReq","continue","keyRangeValue","IDBKeyRange","upperBound","resolve","fuelIndexCursor","tempDistance","tempStartDistance","tempEndDistance","fuelCursor","entryRequest","fuelError","i0","ɵɵinject","i1","DBServiceService","factory","ɵfac","providedIn"],"sources":["/Volumes/Transcend/ionic/driver-log/src/app/logEntries/log-entries.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\nimport { LogEntry } from './log-entry';\nimport { DBServiceService } from '../shared-service/dbservice.service';\n\nconst DATABASE_NAME = 'DriverLogsBase';\nconst DATABASE_VERSION = 1;\nconst LOG_ENTRIES_STORE_NAME = 'LogEntries';\nconst FUEL_ENTRIES_STORE_NAME = 'FuelEntries';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class LogEntriesService {\n  private logEntries = new BehaviorSubject<LogEntry>(new LogEntry());\n  private database!: IDBDatabase;\n  private logEntriesStore!: IDBObjectStore;\n  private fuelEntriesStore!: IDBObjectStore;\n  private lastDistanceEnd: number | undefined;\n\n  constructor(private dbService: DBServiceService) {\n    dbService.init();\n    this.init();\n  } // End of constructor\n\n  init() {\n    // initalizering\n    const databaseRequest = this.dbService.getDatabase(\n      DATABASE_NAME,\n      DATABASE_VERSION\n    );\n\n    console.log('databaseRequest init:', databaseRequest);\n    console.log('timestamp', new Date().toISOString());\n\n    databaseRequest.onupgradeneeded = () => {\n      console.log('databaRequest init logEntries.service', databaseRequest);\n      this.database = databaseRequest.result;\n      if (!this.database.objectStoreNames.contains(LOG_ENTRIES_STORE_NAME)) {\n        this.logEntriesStore = this.database.createObjectStore(\n          LOG_ENTRIES_STORE_NAME,\n          { keyPath: 'id', autoIncrement: true }\n        );\n        if (!this.logEntriesStore.indexNames.contains('by_date')) {\n          this.logEntriesStore.createIndex('by_date', 'date');\n        }\n        if (!this.logEntriesStore.indexNames.contains('by_fuel')) {\n          this.logEntriesStore.createIndex('by_fuel', 'fuel');\n        }\n\n        if (!this.logEntriesStore.indexNames.contains('by_description')) {\n          this.logEntriesStore.createIndex('by_description', 'description');\n        }\n        if (!this.logEntriesStore.indexNames.contains('by_timestamp')) {\n          this.logEntriesStore.createIndex('by_timestamp', 'timestamp');\n        }\n      }\n\n      if (!this.database.objectStoreNames.contains(FUEL_ENTRIES_STORE_NAME)) {\n        // if FUEL_ENTRIES_STORE_NAME isn't created, then create it\n        this.fuelEntriesStore = this.database.createObjectStore(\n          FUEL_ENTRIES_STORE_NAME,\n          { autoIncrement: true }\n        );\n        if (!this.fuelEntriesStore.indexNames.contains('by_logEntryID')) {\n          // if index for FUEL_ENTRIES_STORE_NAME isn't created, then create it\n          this.fuelEntriesStore.createIndex('by_logEntryID', 'logEntryID');\n        }\n        if (!this.fuelEntriesStore.indexNames.contains('by_timestamp')) {\n          this.fuelEntriesStore.createIndex('by_timestamp', 'timestamp');\n        }\n      }\n    }; // end of databaseReuest.onupgradeneeded\n\n    databaseRequest.onsuccess = () => {\n      console.log('databaRequest init logEntries.service', databaseRequest);\n      this.database = databaseRequest.result;\n\n      if (!this.database.objectStoreNames.contains(FUEL_ENTRIES_STORE_NAME)) {\n        // if FUEL_ENTRIES_STORE_NAME isn't created, then create it\n        this.fuelEntriesStore = this.database.createObjectStore(\n          FUEL_ENTRIES_STORE_NAME,\n          { keyPath: 'id', autoIncrement: true }\n        );\n        if (!this.fuelEntriesStore.indexNames.contains('by_logEntryID')) {\n          // if index for FUEL_ENTRIES_STORE_NAME isn't created, then create it\n          this.fuelEntriesStore.createIndex('by_logEntryID', 'logEntryID');\n        }\n        if (!this.fuelEntriesStore.indexNames.contains('by_timestamp')) {\n          this.fuelEntriesStore.createIndex('by_timestamp', 'timeStamp');\n        }\n      }\n    }; // end of databaseReuest.onsucces\n\n    databaseRequest.onerror = () => {\n      const error = databaseRequest.error;\n      console.error('getDatabase failed in init logentriesService', error);\n    };\n  } // end of initalizering\n\n  get distanceEnd() {\n    return this.lastDistanceEnd;\n  }\n\n  /* @name getEntries\n   *  @param: none\n   *  @return: (observable) logEntries\n   */\n\n  getEntries() {\n    return this.logEntries.asObservable();\n  }\n\n  /* @name updateEntries\n   *  @param: LogEntry\n   *  @return: void\n   */\n  updateEntries(logEntry: LogEntry) {\n    this.logEntries.next(logEntry);\n  } // End og getEntries\n\n  /*\n   * @name put\n   * @param: logEntry: LogEntry\n   * @return: async promise: LogEntry\n   * @ description:\n   * Store the LogEntry there are created\n   *\n   */\n  async put(logEntry: LogEntry): Promise<any> {\n    return new Promise((_resolve, reject) => {\n      console.log('logEntries.put this.database', this.database);\n      const tx = this.database.transaction(\n        [LOG_ENTRIES_STORE_NAME, FUEL_ENTRIES_STORE_NAME],\n        'readwrite'\n      ); // get transaction start\n\n      // did crete of transaction failed\n      tx.onerror = () => {\n        console.error('tx fejler', tx.error);\n        console.error('tx: ', tx);\n        tx.abort(); //abort the transaction\n      };\n\n      // store  logEntryDetail\n      const logEntryDetail = {\n        ...logEntry.LogEntryDetail,\n        timestamp: !logEntry.LogEntryDetail.timestamp\n          ? new Date().toISOString()\n          : logEntry.LogEntryDetail.timestamp,\n      };\n\n      // store the LogEntry in database\n      const logEntryRequest = this.dbService.put(\n        tx.objectStore(LOG_ENTRIES_STORE_NAME),\n        logEntryDetail\n      );\n\n      logEntryRequest.onsuccess = async () => {\n        // when it success\n        const logEntryID = logEntryRequest.result; // save the Key\n        logEntry.setLogEntryDetail({ ...logEntryDetail, id: logEntryID });\n\n        if (logEntry.LogEntryDetail.fuel) {\n          // if fuel is sat, then then add logEntryID to fuelEntryDetai\n\n          const distance = await this.getDistanceFuel(tx, logEntryDetail); // find the distance from last fuel\n          const fuelEntryDetail = {\n            ...logEntry.FuelEntryDetail,\n            logEntryID,\n            distance: Number(distance).valueOf(),\n            timestamp: !logEntry.fuelEntryDetail.timestamp\n              ? new Date().toISOString()\n              : logEntry.fuelEntryDetail.timestamp,\n          };\n\n          // store fuelEntryDetail\n          const fuelRequst = this.dbService.put(\n            tx.objectStore(FUEL_ENTRIES_STORE_NAME),\n            fuelEntryDetail\n          );\n\n          // did fuelEntryDetail been storred\n          fuelRequst.onsuccess = () => {\n            const result = fuelRequst.result;\n            console.log('fuelEntry data is saved', result);\n            logEntry.setFuelEntryDetail({ ...fuelEntryDetail, id: result });\n            tx.commit(); // commit the transaction\n          }; // fuelRequest.onsucces\n\n          // didn't fuelEntryDetail stored\n          fuelRequst.onerror = () => {\n            tx.abort(); // abort the trasaction\n          }; // fuelRequest.onerror\n        }\n      }; // logEntryRequest.onSuccess\n\n      // didn't logEntryDetail been stored\n      logEntryRequest.onerror = () => {\n        const error = logEntryRequest.error;\n        console.error(' save logEntry fejler', error);\n        tx.abort(); // bort the transaction\n      }; // logEntryRequest.onerror\n\n      // the transaction been completed\n      tx.oncomplete = () => {\n        console.log('put is completes');\n        this.updateEntries(logEntry); // update logEntries\n        _resolve(logEntry); // return the logEntry there are been stored\n        // return logEntry;\n      };\n\n      tx.onabort = () => {\n        console.error('save the logEntry data has fault', tx.error);\n        reject(tx.error);\n        // return tx.error;\n      };\n    });\n  } // end of put\n\n  async delete(logEntryKey) {\n    const tx = this.database.transaction(\n      [LOG_ENTRIES_STORE_NAME, FUEL_ENTRIES_STORE_NAME],\n      'readwrite'\n    );\n\n    tx.oncomplete = () => {\n      console.log('logEntry with key ' + logEntryKey + ' is deleted');\n    };\n\n    tx.onerror = () => {\n      console.error(\n        'delete of logEntry with key ' + logEntryKey + 'is failed',\n        tx.error\n      );\n    };\n\n    const logEntryStore = tx.objectStore(LOG_ENTRIES_STORE_NAME);\n\n    const logEntryRequest = logEntryStore.get(logEntryKey);\n\n    logEntryRequest.onerror = () => {\n      console.error('can\\'t get the logentry record', logEntryRequest.error);\n      tx.abort();\n    }\n\n    logEntryRequest.onsuccess = () => {\n      const logEntry = logEntryRequest.result;\n\n      if (logEntry.fuel) {\n        const fuelStore = tx.objectStore(FUEL_ENTRIES_STORE_NAME);\n\n        const fuelKey = fuelStore.index('by_logEntryID').getKey(logEntry.id);\n\n        fuelKey.onsuccess = () => {\n          console.log('fuelkey is ' + fuelKey.result);\n\n          if (fuelKey.result !== undefined && fuelKey.result) fuelStore.delete(fuelKey.result);\n        };\n\n        fuelKey.onerror = () => {\n          console.error(\"Can't find the key\" + logEntryKey, fuelKey.error);\n        };\n      }\n\n      const logEntryDeleteRequest = logEntryStore.delete(logEntryKey);\n\n      logEntryDeleteRequest.onsuccess = () => {\n        console.log(\n          'logEntry with key ' + logEntryKey + ' is deleted',\n          logEntryDeleteRequest.result\n        );\n      };\n    };\n  }\n\n  /* @name: getAllData\n   *  @param: none\n   *  @return: Array of LogEntry\n   */\n  getAllData() {\n    console.log('getAllData this.db', this.dbService);\n    const databaseRequest = this.dbService.getDatabase(\n      DATABASE_NAME,\n      DATABASE_VERSION\n    );\n    //const data: Array<LogEntry> = new Array();\n\n    databaseRequest.onsuccess = () => {\n      const db = databaseRequest.result;\n      const tx = db.transaction(\n        [LOG_ENTRIES_STORE_NAME, FUEL_ENTRIES_STORE_NAME],\n        'readwrite'\n      );\n\n      const logEntryStore = tx.objectStore(LOG_ENTRIES_STORE_NAME).openCursor();\n\n      logEntryStore.onerror = () => {\n        console.error('Failed to open cursor', logEntryStore.error);\n        tx.abort();\n      };\n\n      logEntryStore.onsuccess = () => {\n        const cursor = logEntryStore.result;\n        if (cursor) {\n          if (cursor.value.fuel) {\n            const logEntryKey = cursor.key; // get logEntryDetails key\n            // get the fuelEntryDetail record by key\n            const fuelEntryReq = tx\n              .objectStore(FUEL_ENTRIES_STORE_NAME)\n              .index('by_logEntryID')\n              .get(logEntryKey);\n\n            // when get the fuelEntryDetail record, then add record to logEntry\n            fuelEntryReq.onsuccess = () => {\n              const fuelEntryDetail = fuelEntryReq.result;\n              const logEntryDetail = cursor.value;\n              const logEntry = new LogEntry();\n              logEntry.setLogEntryDetail(logEntryDetail);\n              logEntry.setFuelEntryDetail(fuelEntryDetail);\n\n              fuelEntryReq.onerror = () => {\n                const error = fuelEntryReq.error;\n                console.log('get fuel failed', error);\n              };\n\n              this.updateEntries(logEntry); // send logEntry to logEntries\n            };\n          } else {\n            const logEntry = new LogEntry();\n            logEntry.setLogEntryDetail(cursor.value);\n            //data.push(logEntry);\n            this.updateEntries(logEntry);\n          }\n          cursor.continue();\n        } else {\n          tx.commit(); // all Entries is read and comfirm\n        }\n      };\n\n      tx.oncomplete = () => {\n        console.log('getAll data complete');\n      };\n    }; // end of getAll\n  }\n\n  /*\n   * @name: getDistance\n   * @param transaction  * the transaction where this should be a part of\n   * @param logEntry     * the logEntry where is the end logentry\n   * @return Promise<Number>\n   */\n  async getDistanceFuel(\n    transaction: IDBTransaction,\n    logEntry: {\n      timestamp?: string;\n      date?: Date;\n      distanceStart?: number;\n      distanceEnd: any;\n      description?: string;\n      fuel?: boolean;\n      id?;\n    }\n  ) {\n    // get distance betwwen fuel\n\n    // for update record then we get the keyrange not newer then timestamp\n    const keyRangeValue = IDBKeyRange.upperBound(logEntry.timestamp, true);\n\n    // create af promise for aync response\n\n    return await new Promise((resolve, reject) => {\n      // get the record with the last timestamp in fuelEntriesStore\n      const fuelIndexCursor = transaction\n        .objectStore(FUEL_ENTRIES_STORE_NAME)\n        .index('by_timestamp')\n        .openCursor(keyRangeValue, 'prev');\n\n      //initalize the distance variable\n      let tempDistance = null;\n      let tempStartDistance = null;\n      let tempEndDistance: number;\n      let fuelCursor; // initalize the fuelCursor\n\n      tempEndDistance = logEntry.distanceEnd; // let endDistance be ditanceEnd of this logEntry record\n\n      fuelIndexCursor.onsuccess = () => {\n        // is there created a cursor on fuelEntriesStore\n        fuelCursor = fuelIndexCursor.result; // let fuelCursor be the cursor\n\n        if (fuelCursor) {\n          // if there some values on the cursor then\n          const logEntryID = fuelCursor.value.logEntryID; // the logEntryID for the last fuel entry\n\n          if (logEntryID === logEntry.id) {\n            fuelCursor.continue();\n          } else {\n            // get the logEntry that have relation for the last fuel entry\n            const entryRequest = transaction\n              .objectStore(LOG_ENTRIES_STORE_NAME)\n              .get(logEntryID);\n            entryRequest.onsuccess = () => {\n              // if we get af value, then\n              tempStartDistance = entryRequest.result.distanceEnd; // let the startDistance be the distanceEnd for last fuel\n              tempDistance = tempEndDistance - tempStartDistance; // calculate the distance\n              console.log('return distance', tempDistance);\n              resolve(tempDistance); // return the distance\n            };\n\n            entryRequest.onerror = () => {\n              const error = entryRequest.error;\n              console.error('get last distanceEd failed', error);\n              transaction.abort();\n            };\n          }\n        } else {\n          console.log('no more fuel entries', fuelCursor);\n          resolve(tempEndDistance - 0);\n        }\n      };\n\n      fuelIndexCursor.onerror = () => {\n        const fuelError = fuelIndexCursor.error;\n        console.error('get Distance open fuelCursor failed', fuelError);\n        reject(fuelError);\n      };\n    });\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}