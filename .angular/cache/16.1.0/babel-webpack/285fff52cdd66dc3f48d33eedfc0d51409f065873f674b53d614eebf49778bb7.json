{"ast":null,"code":"import _asyncToGenerator from \"/Volumes/Transcend/ionic/driver-log/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport * as i0 from \"@angular/core\";\nconst DATABASE_NAME = 'DriverLogsBase';\nconst DATABASE_VERSION = 1;\nexport class DBServiceService {\n  constructor() {\n    // create the DB connection\n    this.init(); // initalize the DB\n  }\n  /*\n   * @name: init\n   * @param: none\n   * @return: void\n   * @description: initalieze the database and create neceries object store\n   */\n  init() {\n    const request = indexedDB.open(DATABASE_NAME, DATABASE_VERSION); // initalize database\n    request.onupgradeneeded = () => {\n      // when first time to call the database or the database is upgrade\n      this.db = request.result; // save the database\n      if (!this.db.objectStoreNames.contains('LogEntries')) {\n        // if logEntry store is not created, then create it\n        // auto generate key\n        const driverLogStore = this.db.createObjectStore('LogEntries', {\n          keyPath: 'id',\n          autoIncrement: true\n        });\n        // create index for description\n        const descriptionIndex = driverLogStore.createIndex('by_description', 'description');\n        const dateIndex = driverLogStore.createIndex('by_date', 'date'); // create index for date\n        const fuelIndex = driverLogStore.createIndex('by_fuel', 'fuel'); // create index for about there is tank fuel\n        const driverLogTimestampIndex = driverLogStore.createIndex('by_timestamp', 'timestamp');\n      }\n      if (!this.db.objectStoreNames.contains('FuelEntries')) {\n        // if FuelEntries is not an object store, then create it\n        // auto generate key\n        const fuelStore = this.db.createObjectStore('FuelEntries', {\n          keyPath: 'id',\n          autoIncrement: true\n        });\n        // create index for logEntryID\n        const driverLogsIdIndex = fuelStore.createIndex('by_logEntryID', 'logEntryID');\n        const fuelTimestampIndex = fuelStore.createIndex('by_timestamp', 'timestamp');\n      }\n    };\n    request.onsuccess = () => {\n      // when succes save the db\n      this.db = request.result;\n      console.log('the databese is create and initilize', this.db);\n      return this.db;\n    };\n    // Databse didn't been created\n    request.onerror = () => {\n      console.error('open db have failed', request.error);\n      return request.error;\n    };\n  }\n  /*\n   * @name: getDatabase\n   * @param: none\n   * @return: the database type IDBOpenDBRequest\n   * @description: get the database\n   */\n  getDatabase(database = DATABASE_NAME, version = DATABASE_VERSION) {\n    console.log('getDatabase parameter', database, version);\n    return indexedDB.open(database, version);\n  }\n  //\n  // @name = getAll\n  // @descriotion = henter alle data i fra databasen DriverLogs LogEntry store\n  //                finder herefter de stede der er tanket\n  // @param none\n  //\n  getAll() {\n    // if db is not defined, then open it again\n    console.log('indexedDB ', indexedDB);\n    const request = indexedDB.open('DriverLogsBase', 1); // initalize database\n    request.onsuccess = () => {\n      this.db = request.result;\n    };\n    const tx = this.db.transaction(['LogEntries', 'FuelEntries'], 'readwrite'); // start transaction\n    console.log('transaction created', tx);\n    const logEntryStore = tx.objectStore('LogEntries').getAll(); // hent alle data i logEntry store\n    let data;\n    console.log('logEntryStore is creates', logEntryStore);\n    logEntryStore.onsuccess = /*#__PURE__*/_asyncToGenerator(function* () {\n      data = logEntryStore.result;\n      console.log('getted data', data);\n      data.forEach((element, index) => {\n        if (element.fuel) {\n          const fuelEntryStore = tx.objectStore('FuelEntries');\n          console.log('fuelEntryStore', fuelEntryStore);\n          const driverLogIDIndex = fuelEntryStore.index('by_logEntryID');\n          console.log('fuelEntryStore', driverLogIDIndex);\n          console.log('index', index);\n          const fuelEntryReq = driverLogIDIndex.get(index + 1);\n          console.log('fuelEntryReq', fuelEntryReq);\n          fuelEntryReq.onsuccess = /*#__PURE__*/_asyncToGenerator(function* () {\n            const fuelEntryDetail = fuelEntryReq.result;\n            console.log('fuelEntryReq-> detail', fuelEntryDetail);\n            const logEntryDetail = element;\n            data[index] = {\n              logEntryDetail,\n              fuelEntryDetail\n            };\n            console.log('data with fuelEntryDetail ', data[index]);\n          });\n        } else {\n          data[index] = {\n            logEntryDetail: element\n          };\n        }\n      }, error => console.error('noget gik galt ', error));\n      console.log('data for return succes ', data);\n      // return data;\n    });\n\n    tx.oncomplete = () => {\n      console.log('getAll done');\n      console.log('data for return complete', data);\n      return data;\n    };\n  }\n  getAllData() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      const tx = _this.db.transaction(['LogEntries', 'FuelEntries'], 'readwrite'); // start transaction\n      console.log('transaction created', tx);\n      const logEntryStore = tx.objectStore('LogEntries').getAll(); // hent alle data i logEntry store\n      let data;\n      console.log('logEntryStore is creates', logEntryStore);\n      logEntryStore.onsuccess = /*#__PURE__*/_asyncToGenerator(function* () {\n        data = logEntryStore.result;\n        console.log('getted data', data);\n        data.forEach((element, index) => {\n          if (element.fuel) {\n            const fuelEntryStore = tx.objectStore('FuelEntries');\n            console.log('fuelEntryStore', fuelEntryStore);\n            const driverLogIDIndex = fuelEntryStore.index('by_logEntryID');\n            console.log('fuelEntryStore', driverLogIDIndex);\n            console.log('index', index);\n            const fuelEntryReq = driverLogIDIndex.get(index + 1);\n            console.log('fuelEntryReq', fuelEntryReq);\n            fuelEntryReq.onsuccess = /*#__PURE__*/_asyncToGenerator(function* () {\n              const fuelEntryDetail = fuelEntryReq.result;\n              console.log('fuelEntryReq-> detail', fuelEntryDetail);\n              const logEntryDetail = element;\n              data[index] = {\n                logEntryDetail,\n                fuelEntryDetail\n              };\n              console.log('data with fuelEntryDetail ', data[index]);\n            });\n          } else {\n            data[index] = {\n              logEntryDetail: element\n            };\n          }\n        }, error => console.error('noget gik galt ', error));\n        console.log('data for return succes ', data);\n        //return data;\n      });\n\n      tx.oncomplete = () => {\n        console.log('getAll done');\n        console.log('data for return complete', data);\n        return data;\n      };\n      //return data;\n    })();\n  }\n\n  put(objectStore, value, key) {\n    const returnPut = objectStore.put(value, key);\n    console.log('objectStore.put returnPut', returnPut);\n    return returnPut;\n    //const putResult = database.transaction(_objectStoreName,'readwrite').objectStore(_objectStoreName).put(value);\n  }\n}\n\nDBServiceService.ɵfac = function DBServiceService_Factory(t) {\n  return new (t || DBServiceService)();\n};\nDBServiceService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: DBServiceService,\n  factory: DBServiceService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["DATABASE_NAME","DATABASE_VERSION","DBServiceService","constructor","init","request","indexedDB","open","onupgradeneeded","db","result","objectStoreNames","contains","driverLogStore","createObjectStore","keyPath","autoIncrement","descriptionIndex","createIndex","dateIndex","fuelIndex","driverLogTimestampIndex","fuelStore","driverLogsIdIndex","fuelTimestampIndex","onsuccess","console","log","onerror","error","getDatabase","database","version","getAll","tx","transaction","logEntryStore","objectStore","data","_asyncToGenerator","forEach","element","index","fuel","fuelEntryStore","driverLogIDIndex","fuelEntryReq","get","fuelEntryDetail","logEntryDetail","oncomplete","getAllData","_this","put","value","key","returnPut","factory","ɵfac","providedIn"],"sources":["/Volumes/Transcend/ionic/driver-log/src/app/shared-service/dbservice.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\n\nconst DATABASE_NAME = 'DriverLogsBase';\nconst DATABASE_VERSION = 1;\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class DBServiceService {\n  private db!: IDBDatabase; // store database id\n  private driverLogStore: any; // store the driverLogStore\n  private fuelStore: any; // store the fuelStore\n\n  constructor() {\n    // create the DB connection\n    this.init(); // initalize the DB\n  }\n\n  /*\n   * @name: init\n   * @param: none\n   * @return: void\n   * @description: initalieze the database and create neceries object store\n   */\n\n  init() {\n    const request = indexedDB.open(DATABASE_NAME, DATABASE_VERSION); // initalize database\n\n    request.onupgradeneeded =  () => {\n      // when first time to call the database or the database is upgrade\n      this.db = request.result; // save the database\n\n      if (!this.db.objectStoreNames.contains('LogEntries')) {\n        // if logEntry store is not created, then create it\n        // auto generate key\n        const driverLogStore = this.db.createObjectStore('LogEntries', {\n          keyPath: 'id',\n          autoIncrement: true,\n        });\n\n        // create index for description\n        const descriptionIndex = driverLogStore.createIndex(\n          'by_description',\n          'description'\n        );\n\n        const dateIndex = driverLogStore.createIndex('by_date', 'date'); // create index for date\n\n        const fuelIndex = driverLogStore.createIndex('by_fuel', 'fuel'); // create index for about there is tank fuel\n        const driverLogTimestampIndex = driverLogStore.createIndex('by_timestamp','timestamp');\n      }\n      if (!this.db.objectStoreNames.contains('FuelEntries')) {\n        // if FuelEntries is not an object store, then create it\n        // auto generate key\n        const fuelStore = this.db.createObjectStore('FuelEntries', {\n          keyPath: 'id',\n          autoIncrement: true,\n        });\n\n        // create index for logEntryID\n        const driverLogsIdIndex = fuelStore.createIndex(\n          'by_logEntryID',\n          'logEntryID'\n        );\n         const fuelTimestampIndex = fuelStore.createIndex('by_timestamp','timestamp');\n      }\n    };\n\n    request.onsuccess = () => {\n      // when succes save the db\n      this.db = request.result;\n      console.log('the databese is create and initilize', this.db);\n      return this.db;\n    };\n\n    // Databse didn't been created\n    request.onerror = () => {\n      console.error('open db have failed', request.error);\n      return request.error;\n    };\n  }\n\n  /*\n   * @name: getDatabase\n   * @param: none\n   * @return: the database type IDBOpenDBRequest\n   * @description: get the database\n   */\n\n  getDatabase(database = DATABASE_NAME, version = DATABASE_VERSION): IDBOpenDBRequest {\n    console.log('getDatabase parameter', database,version);\n    return  indexedDB.open(database,version);\n  }\n\n  //\n  // @name = getAll\n  // @descriotion = henter alle data i fra databasen DriverLogs LogEntry store\n  //                finder herefter de stede der er tanket\n  // @param none\n  //\n\n  getAll() {\n    // if db is not defined, then open it again\n\n    console.log('indexedDB ', indexedDB);\n      const request = indexedDB.open('DriverLogsBase', 1); // initalize database\n      request.onsuccess = () => {\n        this.db = request.result;\n      };\n      const tx = this.db.transaction(\n        ['LogEntries', 'FuelEntries'],\n        'readwrite'\n      ); // start transaction\n      console.log('transaction created', tx);\n      const logEntryStore = tx.objectStore('LogEntries').getAll(); // hent alle data i logEntry store\n      let data: any[];\n      console.log('logEntryStore is creates', logEntryStore);\n\n      logEntryStore.onsuccess = async () => {\n        data = logEntryStore.result;\n        console.log('getted data', data);\n\n        data.forEach(\n          (element: { fuel: any }, index: number) => {\n            if (element.fuel) {\n              const fuelEntryStore = tx.objectStore('FuelEntries');\n              console.log('fuelEntryStore', fuelEntryStore);\n              const driverLogIDIndex = fuelEntryStore.index('by_logEntryID');\n              console.log('fuelEntryStore', driverLogIDIndex);\n              console.log('index', index);\n\n              const fuelEntryReq = driverLogIDIndex.get(index + 1);\n              console.log('fuelEntryReq', fuelEntryReq);\n              fuelEntryReq.onsuccess = async () => {\n                const fuelEntryDetail = fuelEntryReq.result;\n                console.log('fuelEntryReq-> detail', fuelEntryDetail);\n                const logEntryDetail = element;\n\n                data[index] = { logEntryDetail, fuelEntryDetail };\n                console.log('data with fuelEntryDetail ', data[index]);\n              };\n            } else {\n              data[index] = { logEntryDetail: element };\n            }\n          },\n          (error: any) => console.error('noget gik galt ', error)\n        );\n        console.log('data for return succes ', data);\n        // return data;\n      };\n\n      tx.oncomplete = () => {\n        console.log('getAll done');\n        console.log('data for return complete', data);\n        return data;\n      };\n  }\n\n  async getAllData(): Promise<any> {\n    const tx = this.db.transaction(['LogEntries', 'FuelEntries'], 'readwrite'); // start transaction\n    console.log('transaction created', tx);\n    const logEntryStore = tx.objectStore('LogEntries').getAll(); // hent alle data i logEntry store\n    let data: any[];\n    console.log('logEntryStore is creates', logEntryStore);\n\n    logEntryStore.onsuccess = async () => {\n      data = logEntryStore.result;\n      console.log('getted data', data);\n\n      data.forEach(\n        (element: { fuel: any }, index: number) => {\n          if (element.fuel) {\n            const fuelEntryStore = tx.objectStore('FuelEntries');\n            console.log('fuelEntryStore', fuelEntryStore);\n            const driverLogIDIndex = fuelEntryStore.index('by_logEntryID');\n            console.log('fuelEntryStore', driverLogIDIndex);\n            console.log('index', index);\n\n            const fuelEntryReq = driverLogIDIndex.get(index + 1);\n            console.log('fuelEntryReq', fuelEntryReq);\n            fuelEntryReq.onsuccess = async () => {\n              const fuelEntryDetail = fuelEntryReq.result;\n              console.log('fuelEntryReq-> detail', fuelEntryDetail);\n              const logEntryDetail = element;\n\n              data[index] = { logEntryDetail, fuelEntryDetail };\n              console.log('data with fuelEntryDetail ', data[index]);\n            };\n          } else {\n            data[index] = { logEntryDetail: element };\n          }\n        },\n        (error: any) => console.error('noget gik galt ', error)\n      );\n      console.log('data for return succes ', data);\n      //return data;\n    };\n\n    tx.oncomplete = () => {\n      console.log('getAll done');\n      console.log('data for return complete', data);\n      return data;\n    };\n    //return data;\n  }\n\n   put(objectStore: IDBObjectStore, value: any, key?: any): IDBRequest {\n    const returnPut = objectStore.put(value,key);\n    console.log('objectStore.put returnPut',returnPut);\n    return  returnPut;\n       //const putResult = database.transaction(_objectStoreName,'readwrite').objectStore(_objectStoreName).put(value);\n  }\n\n\n }\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}