{"ast":null,"code":"import _asyncToGenerator from \"/Volumes/Transcend/ionic/driver-log/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { HttpHeaders } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"../shared-service/dbservice.service\";\nconst httpOptions = {\n  responseType: 'json',\n  observe: 'response',\n  headers: new HttpHeaders({\n    \"Content-type\": 'application/json',\n    'Accept': '*/*',\n    'Access-Control-Allow-Origin': '*',\n    'Referrer-Policy': 'origin-when-cross-origin'\n  })\n};\nconst DATABASE_NAME = 'UserBase';\nconst DATABASE_VERSION = 1;\nconst USER_STORE_NAME = 'Users';\nexport class UserService {\n  constructor(http, dbService) {\n    // const databaseRequest = dbService.getDatabase(DATABASE_NAME, DATABASE_VERSION);\n    this.http = http;\n    this.dbService = dbService;\n    // databaseRequest.onupgradeneeded = () => {\n    //   this.database = databaseRequest.result;\n    //   if (!this.database.objectStoreNames.contains(USER_STORE_NAME)) {\n    //     this.userStore = this.database.createObjectStore(\n    //       USER_STORE_NAME,\n    //       { keyPath: 'id', autoIncrement: true }\n    //     );\n    //     if (!this.userStore.indexNames.contains('by_username')) {\n    //       this.userStore.createIndex('by_username', 'username');\n    //     }\n    //   }\n    // }\n    // databaseRequest.onsuccess = () => {\n    //   this.database = databaseRequest.result;\n    //  this.userStore = this.database.transaction(USER_STORE_NAME).objectStore(USER_STORE_NAME);\n    // }\n    // databaseRequest.onerror = () => {\n    //   const databaseError = databaseRequest.error;\n    //   console.error('some database request fail',databaseError);\n    // }\n    this.init().then(value => {\n      console.log('succes ', value, this.database);\n    }, error => {\n      console.log('error ', error);\n    });\n  }\n  init() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      const databaseRequest = _this.dbService.getDatabase(DATABASE_NAME, DATABASE_VERSION);\n      databaseRequest.onupgradeneeded = () => {\n        _this.database = databaseRequest.result;\n        if (!_this.database.objectStoreNames.contains(USER_STORE_NAME)) {\n          _this.userStore = _this.database.createObjectStore(USER_STORE_NAME, {\n            keyPath: 'id',\n            autoIncrement: true\n          });\n          if (!_this.userStore.indexNames.contains('by_username')) {\n            _this.userStore.createIndex('by_username', 'username');\n          }\n        }\n        return _this.database;\n      };\n      databaseRequest.onsuccess = () => {\n        _this.database = databaseRequest.result;\n        _this.userStore = _this.database.transaction(USER_STORE_NAME).objectStore(USER_STORE_NAME);\n        return _this.database;\n      };\n      databaseRequest.onerror = () => {\n        const databaseError = databaseRequest.error;\n        console.error('some database request fail', databaseError);\n        return databaseError;\n      };\n      for (let index = databaseRequest; index.result || index.readyState === 'done';) {\n        return databaseRequest;\n      }\n    })();\n  }\n  ngOnInit() {\n    const databaseRequest = this.dbService.getDatabase(DATABASE_NAME, DATABASE_VERSION);\n    databaseRequest.onupgradeneeded = () => {\n      this.database = databaseRequest.result;\n      if (!this.database.objectStoreNames.contains(USER_STORE_NAME)) {\n        this.userStore = this.database.createObjectStore(USER_STORE_NAME, {\n          keyPath: 'id',\n          autoIncrement: true\n        });\n        if (!this.userStore.indexNames.contains('by_username')) {\n          this.userStore.createIndex('by_username', 'username');\n        }\n      }\n    };\n    databaseRequest.onsuccess = () => {\n      this.database = databaseRequest.result;\n      this.userStore = this.database.transaction(USER_STORE_NAME).objectStore(USER_STORE_NAME);\n    };\n    databaseRequest.onerror = () => {\n      const databaseError = databaseRequest.error;\n      console.error('some database request fail', databaseError);\n    };\n  }\n  register(form) {\n    var url = 'https://amigal.dk/webservices/v0a/user/register';\n    const body = {\n      \"username\": form.value.username,\n      \"password\": form.value.password,\n      \"name\": form.value.name\n    };\n    return this.http.post(url, body, httpOptions);\n  }\n  login(form) {\n    var url = 'https://amigal.dk/webservices/v0a/user/login';\n    const body = {\n      \"username\": form.value.username,\n      \"password\": form.value.password,\n      \"name\": form.value.name\n    };\n    return this.http.post(url, body, httpOptions);\n  }\n  isLoggedIn() {\n    this.init().then(result => {\n      console.log(\" INIT result is \", result);\n      return result;\n    }, error => {\n      console.error(\"noget gik galt \", error);\n    });\n    console.log('userService isLoggedIn called', this.userStore, this.database);\n    if (this.database) {\n      const databaseRequest = this.dbService.getDatabase(DATABASE_NAME, DATABASE_VERSION);\n    }\n    const userRequest = this.dbService.get(this.userStore, IDBKeyRange.lowerBound(0));\n    userRequest.onsuccess = () => {\n      return userRequest.result.isLoggedIn;\n    };\n    userRequest.onerror = () => {\n      return false;\n    };\n  }\n}\nUserService.ɵfac = function UserService_Factory(t) {\n  return new (t || UserService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.DBServiceService));\n};\nUserService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: UserService,\n  factory: UserService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["HttpHeaders","httpOptions","responseType","observe","headers","DATABASE_NAME","DATABASE_VERSION","USER_STORE_NAME","UserService","constructor","http","dbService","init","then","value","console","log","database","error","_this","_asyncToGenerator","databaseRequest","getDatabase","onupgradeneeded","result","objectStoreNames","contains","userStore","createObjectStore","keyPath","autoIncrement","indexNames","createIndex","onsuccess","transaction","objectStore","onerror","databaseError","index","readyState","ngOnInit","register","form","url","body","username","password","name","post","login","isLoggedIn","userRequest","get","IDBKeyRange","lowerBound","i0","ɵɵinject","i1","HttpClient","i2","DBServiceService","factory","ɵfac","providedIn"],"sources":["/Volumes/Transcend/ionic/driver-log/src/app/user/user.service.ts"],"sourcesContent":["import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Injectable, OnInit } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { DBServiceService } from '../shared-service/dbservice.service';\nimport { timeout } from 'rxjs';\n\nconst httpOptions ={\n  responseType: 'json' as const,\n  observe: 'response' as const,\n  headers: new HttpHeaders({\n    \"Content-type\": 'application/json' as const,\n    'Accept': '*/*' as const,\n    'Access-Control-Allow-Origin': '*' as const,\n    'Referrer-Policy': 'origin-when-cross-origin' as const\n  })\n\n}\n\nconst DATABASE_NAME = 'UserBase';\nconst DATABASE_VERSION = 1;\nconst USER_STORE_NAME = 'Users';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UserService implements OnInit {\n\n  database: IDBDatabase;\n  userStore: IDBObjectStore;\n\n\n\n  constructor(private http: HttpClient, private dbService: DBServiceService) {\n    // const databaseRequest = dbService.getDatabase(DATABASE_NAME, DATABASE_VERSION);\n\n    // databaseRequest.onupgradeneeded = () => {\n    //   this.database = databaseRequest.result;\n\n    //   if (!this.database.objectStoreNames.contains(USER_STORE_NAME)) {\n    //     this.userStore = this.database.createObjectStore(\n    //       USER_STORE_NAME,\n    //       { keyPath: 'id', autoIncrement: true }\n    //     );\n    //     if (!this.userStore.indexNames.contains('by_username')) {\n    //       this.userStore.createIndex('by_username', 'username');\n    //     }\n\n    //   }\n    // }\n    // databaseRequest.onsuccess = () => {\n    //   this.database = databaseRequest.result;\n\n    //  this.userStore = this.database.transaction(USER_STORE_NAME).objectStore(USER_STORE_NAME);\n    // }\n\n    // databaseRequest.onerror = () => {\n    //   const databaseError = databaseRequest.error;\n    //   console.error('some database request fail',databaseError);\n    // }\n\n    this.init().then(\n      (value) => {  console.log('succes ',value, this.database); },\n      (error) => { console.log('error ',error)}\n    )\n  }\n\n  async init(){\n    const databaseRequest = this.dbService.getDatabase(DATABASE_NAME, DATABASE_VERSION);\n\n    databaseRequest.onupgradeneeded = () => {\n      this.database = databaseRequest.result;\n\n      if (!this.database.objectStoreNames.contains(USER_STORE_NAME)) {\n        this.userStore = this.database.createObjectStore(\n          USER_STORE_NAME,\n          { keyPath: 'id', autoIncrement: true }\n        );\n        if (!this.userStore.indexNames.contains('by_username')) {\n          this.userStore.createIndex('by_username', 'username');\n        }\n\n      }\n      return this.database;\n    }\n    databaseRequest.onsuccess = () => {\n      this.database = databaseRequest.result;\n\n     this.userStore = this.database.transaction(USER_STORE_NAME).objectStore(USER_STORE_NAME);\n     return this.database;\n    }\n\n    databaseRequest.onerror = () => {\n      const databaseError = databaseRequest.error;\n      console.error('some database request fail',databaseError);\n      return databaseError;\n    }\n\n    for (let index = databaseRequest; index.result || index.readyState === 'done'; ) {\n      return databaseRequest;\n\n    }\n  }\n\n\n  ngOnInit(): void {\n    const databaseRequest = this.dbService.getDatabase(DATABASE_NAME, DATABASE_VERSION);\n\n    databaseRequest.onupgradeneeded = () => {\n      this.database = databaseRequest.result;\n\n      if (!this.database.objectStoreNames.contains(USER_STORE_NAME)) {\n        this.userStore = this.database.createObjectStore(\n          USER_STORE_NAME,\n          { keyPath: 'id', autoIncrement: true }\n        );\n        if (!this.userStore.indexNames.contains('by_username')) {\n          this.userStore.createIndex('by_username', 'username');\n        }\n\n      }\n    }\n    databaseRequest.onsuccess = () => {\n      this.database = databaseRequest.result;\n\n     this.userStore = this.database.transaction(USER_STORE_NAME).objectStore(USER_STORE_NAME);\n    }\n\n    databaseRequest.onerror = () => {\n      const databaseError = databaseRequest.error;\n      console.error('some database request fail',databaseError);\n    }\n  }\n\n  register(form: FormGroup){\n    var url='https://amigal.dk/webservices/v0a/user/register';\n\n    const body = {\n      \"username\": form.value.username,\n      \"password\": form.value.password,\n      \"name\": form.value.name\n    }\n\n    return this.http.post(url,body,httpOptions);\n  }\n\n  login(form: FormGroup){\n    var url='https://amigal.dk/webservices/v0a/user/login';\n\n    const body = {\n      \"username\": form.value.username,\n      \"password\": form.value.password,\n      \"name\": form.value.name\n    }\n\n    return this.http.post(url,body,httpOptions);\n  }\n\n  isLoggedIn(){\n\n    this.init().then(\n      (result) => {\n          console.log(\" INIT result is \",result);\n          return result;\n        },\n        (error) => {\n          console.error(\"noget gik galt \",error);\n        }\n    )\n    console.log('userService isLoggedIn called', this.userStore, this.database);\n    if(this.database) {\n      const databaseRequest = this.dbService.getDatabase(DATABASE_NAME,DATABASE_VERSION);\n\n    }\n    const userRequest = this.dbService.get(this.userStore,IDBKeyRange.lowerBound(0));\n\n    userRequest.onsuccess = () => {\n      return userRequest.result.isLoggedIn;\n    }\n\n    userRequest.onerror = () => {\n      return false;\n    }\n\n  }\n\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}